using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ChatRoom.Common;
using FluentAssertions;
using Moq;
using Orleans.TestingHost;
using Xunit;

namespace ChatRoom.Tests;

[Collection(ClusterFixtureCollection.Name)]
public class ChannelGrainTests(ClusterFixture fixture)
{
    private readonly TestCluster _cluster = fixture.Cluster;

    [Fact]
    public async Task ItGenerateNextReplyTestAsync()
    {
        var roomGrain = _cluster.GrainFactory.GetGrain<IRoomGrain>(nameof(ItGenerateNextReplyTestAsync));
        var chatPlatformClient = new ChatPlatformClient(_cluster.Client, nameof(ItGenerateNextReplyTestAsync));
        var dummyAgent = new DummyAgent(new AgentInfo("dummy", "dummy", true));
        var observer = Mock.Of<IRoomObserver>();
        await chatPlatformClient.RegisterAgentAsync(dummyAgent);
        var members = await roomGrain.GetMembers();
        members.Should().ContainSingle(x => x.Name == "dummy");

        // create a channel
        var channel = roomGrain.CreateChannel(nameof(ItGenerateNextReplyTestAsync));
        await roomGrain.AddAgentToChannel(nameof(ItGenerateNextReplyTestAsync), dummyAgent.Name);
        var channelGrain = _cluster.GrainFactory.GetGrain<IChannelGrain>(nameof(ItGenerateNextReplyTestAsync));
        var channelInfo = await channelGrain.GetChannelInfo();
        channelInfo.Members.Should().ContainSingle(x => x.Name == dummyAgent.Name);

        // test generate next reply
        var reply = await channelGrain.GenerateNextReply([dummyAgent.Name]);

        // reply should be generated by dummy agent
        reply!.From.Should().Be(dummyAgent.Name);
    }
}
